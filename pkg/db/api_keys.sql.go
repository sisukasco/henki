// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: api_keys.sql

package db

import (
	"context"
	"time"
)

const deleteAPIKey = `-- name: DeleteAPIKey :exec
DELETE FROM api_keys 
WHERE key=$1 AND 
user_id=$2
`

type DeleteAPIKeyParams struct {
	Key    string `json:"key"`
	UserID string `json:"user_id"`
}

func (q *Queries) DeleteAPIKey(ctx context.Context, arg DeleteAPIKeyParams) error {
	_, err := q.db.ExecContext(ctx, deleteAPIKey, arg.Key, arg.UserID)
	return err
}

const doesAPIKeyExist = `-- name: DoesAPIKeyExist :one
SELECT EXISTS
(SELECT 1 FROM api_keys WHERE key=$1 ) 
AS "exists"
`

func (q *Queries) DoesAPIKeyExist(ctx context.Context, key string) (bool, error) {
	row := q.db.QueryRowContext(ctx, doesAPIKeyExist, key)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getAPIKeys = `-- name: GetAPIKeys :many
SELECT
   key, 
   created_at
FROM api_keys
WHERE user_id = $1 
ORDER BY created_at
`

type GetAPIKeysRow struct {
	Key       string    `json:"key"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) GetAPIKeys(ctx context.Context, userID string) ([]GetAPIKeysRow, error) {
	rows, err := q.db.QueryContext(ctx, getAPIKeys, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAPIKeysRow
	for rows.Next() {
		var i GetAPIKeysRow
		if err := rows.Scan(&i.Key, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserFromAPIKey = `-- name: GetUserFromAPIKey :one
SELECT
   users.id, users.email, users.avatar_url, users.first_name, users.last_name, users.encrypted_password, users.confirmed_at, users.invited_at, users.confirmation_token, users.confirmation_sent_at, users.recovery_token, users.recovery_sent_at, users.email_change_token, users.email_change, users.email_change_sent_at, users.last_sign_in_at, users.user_info, users.created_at, users.updated_at
FROM users,api_keys
WHERE api_keys.key = $1 AND 
api_keys.user_id = users.id
`

func (q *Queries) GetUserFromAPIKey(ctx context.Context, key string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserFromAPIKey, key)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.AvatarUrl,
		&i.FirstName,
		&i.LastName,
		&i.EncryptedPassword,
		&i.ConfirmedAt,
		&i.InvitedAt,
		&i.ConfirmationToken,
		&i.ConfirmationSentAt,
		&i.RecoveryToken,
		&i.RecoverySentAt,
		&i.EmailChangeToken,
		&i.EmailChange,
		&i.EmailChangeSentAt,
		&i.LastSignInAt,
		&i.UserInfo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const newApiKey = `-- name: NewApiKey :one
INSERT INTO api_keys (
  key,user_id
) VALUES (
  $1,$2
)
RETURNING key, user_id, created_at
`

type NewApiKeyParams struct {
	Key    string `json:"key"`
	UserID string `json:"user_id"`
}

func (q *Queries) NewApiKey(ctx context.Context, arg NewApiKeyParams) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, newApiKey, arg.Key, arg.UserID)
	var i ApiKey
	err := row.Scan(&i.Key, &i.UserID, &i.CreatedAt)
	return i, err
}
